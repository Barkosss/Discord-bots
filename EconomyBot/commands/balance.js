const { Modal, TextInputComponent, MessageEmbed, MessageButton, MessageSelectMenu, MessageActionRow } = require('discord.js');
const timestamp = require('discord-timestamp');

// Database - Moonlifedb
const { Database, LocalStorage, JSONFormatter, Snowflake } = require('moonlifedb');
const db = new Database(new LocalStorage({ path: 'database'}), { useTabulation: new JSONFormatter({ whitespace: '\t' }) });
// Database - Moonlifedb

/* Command - Balance

EN: Display the user's current balance.
Ability to make withdrawals and top-ups through your profile (When viewing your balance).
When viewing another person's balance, give an opportunity to make a transfer.
---------------
RU: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å —Å–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–ü—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞).
–ü—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–ª–∞–Ω—Å–∞ —á—É–∂–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.

*/

module.exports.run = async(client, interaction) => {

    try {
        if (!db.check('account', { key: `${interaction.user.id}` })) { // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–∞–∑–µ–î–∞–Ω–Ω—ã—Ö
            db.edit('account', { key: `${interaction.user.id}`, value: {
                'userCash': 0,
                'userBank': 0,
                'createdAt': timestamp(Date.now())
            }, newline: true });
        }
        const userData = db.read('account', { key: `${interaction.user.id}` });
        const lang = db.read('lang', { key: `${(interaction.locale == 'ru') ? ('ru') : ('en')}` });
        const targetMember = (interaction.options.getUser('member')) ?? (interaction.user);

        if (targetMember.bot) return await interaction.reply({ content: `${lang.balance.error.isBot}`, ephemeral: true });

        const cash = new Intl.NumberFormat("de").format(parseInt(userData.userCash));
        const bank = new Intl.NumberFormat("de").format(parseInt(userData.userBank));
        const total = new Intl.NumberFormat("de").format(userData.userCash + userData.userBank);

        const embed = new MessageEmbed()
        embed.setTitle(`${lang.balance.title} - ${targetMember.username}`)
        embed.addFields([
            { name: `${lang.balance.bank}:`, value: '**`ü™ô\| ' + ' '.repeat(((9 - String(bank).length) >= 0) ? (9 - String(bank).length) : (0)) + String(bank) + ' ƒê`**', inline: true }, // Bank | –ë–∞–Ω–∫
            { name: `${lang.balance.cash}:`, value: '**`ü™ô\| ' + ' '.repeat(((9 - String(cash).length) >= 0) ? (9 - String(cash).length) : (0)) + String(cash) + ' ƒê`**', inline: true }, // Cash | –ù–∞–ª–∏—á–Ω—ã–µ
            { name: `${lang.balance.total}:`, value: '**`ü™ô\| ' + ' '.repeat(((26 - String(total).length) >= 0) ? (26 - String(total).length) : (0)) + String(total) + ' ƒê`**', inline: false }, // Total | –í—Å–µ–≥–æ
        ])
        embed.setFooter({ text: `User ID: ${targetMember.id}` });
        embed.setColor(`79b7ff`)

        const button = new MessageActionRow()
        if (interaction.user.id != targetMember.id) { // –ï—Å–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            button.addComponents( // –ü–µ—Ä–µ–≤–æ–¥
                new MessageButton()
                    .setStyle(`SECONDARY`)
                    .setCustomId(`pay_${targetMember.id}`)
                    .setLabel(`${lang.balance.payCash}`)
                    .setEmoji(`‚§µÔ∏è`)
            )
        } else { // –ï—Å–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            button.addComponents( // –°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ —Å–æ —Å—á—ë—Ç–∞
                new MessageButton()
                    .setStyle(`SECONDARY`)
                    .setCustomId(`withdraw`)
                    .setLabel(`${lang.balance.withdrawCash}`)
                    .setEmoji(`‚¨ÜÔ∏è`)
                    .setDisabled((userData.userBank <= 0) ? (true) : (false))
                    
            ).addComponents( // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞
                new MessageButton()
                    .setStyle(`SECONDARY`)
                    .setCustomId(`deposit`)
                    .setLabel(`${lang.balance.depositCash}`)
                    .setEmoji(`‚¨áÔ∏è`)
                    .setDisabled((userData.userCash <= 0) ? (true) : (false))
            )
        }

        await interaction.reply({ embeds:[embed], components:[button], ephemeral: true });

    } catch(error) {
        console.log(error);
    }
}